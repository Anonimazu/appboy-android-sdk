import org.ajoberstar.grgit.Grgit

apply plugin: 'com.android.application'

dependencies {
  implementation project(':android-sdk-ui')
  // Note: This requires the Android Support Repository to be installed, please see the README.md
  implementation "com.android.support:support-v4:${SUPPORT_LIBS_VERSION}"
  implementation "com.android.support:appcompat-v7:${SUPPORT_LIBS_VERSION}"
  implementation "com.android.support:design:${SUPPORT_LIBS_VERSION}"

  implementation "com.google.android.gms:play-services-location:${PLAY_SERVICES_LOCATION_VERSION}"
  implementation "com.google.android.gms:play-services-maps:${PLAY_SERVICES_MAPS_VERSION}"

  implementation "io.branch.sdk.android:library:${BRANCH_VERSION}"
  implementation "com.github.bumptech.glide:glide:${GLIDE_VERSION}"

  implementation "com.google.firebase:firebase-core:${FIREBASE_CORE_VERSION}"
  implementation "com.google.firebase:firebase-messaging:${FIREBASE_PUSH_MESSAGING_VERSION}"
  implementation "com.google.firebase:firebase-ml-vision:${FIREBASE_ML_VISION}"
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    applicationId "com.appboy.sample"
    versionName rootProject.ext.appVersionName
    versionCode 139
    resValue "string", "google_maps_key", (project.findProperty("GOOGLE_MAPS_API_KEY") ?: "")

    buildConfigField "String", "CURRENT_BRANCH", "\"" + getCurrentBranch() + "\""
    buildConfigField "String", "COMMIT_HASH", "\"" + getCommitHash() + "\""
    buildConfigField "String", "BUILD_TIME", "\"" + new Date() + "\""
  }

  lintOptions {
    disable 'MissingTranslation'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

def getCurrentBranch() {
  def grgit = Grgit.open(dir: '.')
  def curBranch = grgit.branch.getCurrent().name
  grgit.close()
  return curBranch
}

def getCommitHash() {
  def grgit = Grgit.open(dir: '.')
  def commitHash = grgit.head().id
  grgit.close()
  return commitHash
}
